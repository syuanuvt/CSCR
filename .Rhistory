library(shiny); runApp('ClusterViz.R')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='syuan', token='DECB46EEE41174CD7FCCCD9CB735D483', secret='1JFAG47YRuq1482oZpBC5MIPxu8ItaZBTqOjmkPT')
runApp('ClusterViz.R')
runApp()
library(RSpectra)
remove.packages("CKM")
library(CKM)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
remotes::install_github("syuanuvt/CKM")
library(CKM)
?svds
svds
nobs <- 60
ncluster <- 3
nnoisevar <- 100
nsigvar <- 20
mu <- 1 # the mean differences of the centroids between two neighboring clusters
var <- 1 # therefore, each response is drawn from N(mean, 1)
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
true.cluster.assign <- sim.data[[2]]
nobs <- 60
ncluster <- 3
nnoisevar <- 100
nvalidvar <- 20
mu <- 1 # the mean differences of the centroids between two neighboring clusters
var <- 1 # therefore, each response is drawn from N(mean, 1)
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
true.cluster.assign <- sim.data[[2]]
ncluster <- 3
ckm.sel.var <- CKMSelVar(dataset, ncluster)
devtools::docuent()
devtools::document()
setwd("C:/Users/Shuai Yuan/Documents/CSCR/CSCR/CSCR")
devtools::document()
library(ClusterSSCA)
n_cluster <- 3 # number of clusters
mem_cluster <- c(50,50,50) # number of observations in each cluster (of length n_cluster)
n_block <- 2  # number of blocks in the multi-block data
n_com <- 2  # number of common components
n_distinct <- c(1,1) # number of distinctive components in each data block (of length n_block)
n_var <- c(20,10)  # number of variables in each data block (of length n_var)
p_sparse <- 0.5  # level of sparsity
p_noise <- 0.3  # level of noise
p_combase <- 0.5 # congruence level of the loading matrices
p_fixzero <- 1 # we assume the positions of zero loadings are identical across different clusters
mean  <- 0.1 # the proportion of the mean structure in total cluster differences
CSSCASimulation(n_cluster, mem_cluster, n_block, n_com, n_distinct, n_var, p_sparse,
p_noise, p_combase, p_fixzero, "both", mean_v)
n_cluster <- 3 # number of clusters
mem_cluster <- c(50,50,50) # number of observations in each cluster (of length n_cluster)
n_block <- 2  # number of blocks in the multi-block data
n_com <- 2  # number of common components
n_distinct <- c(1,1) # number of distinctive components in each data block (of length n_block)
n_var <- c(20,10)  # number of variables in each data block (of length n_var)
p_sparse <- 0.5  # level of sparsity
p_noise <- 0.3  # level of noise
p_combase <- 0.5 # congruence level of the loading matrices
p_fixzero <- 1 # we assume the positions of zero loadings are identical across different clusters
mean  <- 0.1 # the proportion of the mean structure in total cluster differences
CSSCASimulation(n_cluster, mem_cluster, n_block, n_com, n_distinct, n_var, p_sparse,
p_noise, p_combase, p_fixzero, "both", mean)
n_cluster <- 3 # number of clusters
mem_cluster <- c(50,50,50) # number of observations in each cluster (of length n_cluster)
n_block <- 2  # number of blocks in the multi-block data
n_com <- 2  # number of common components
n_distinct <- c(1,1) # number of distinctive components in each data block (of length n_block)
n_var <- c(20,10)  # number of variables in each data block (of length n_var)
p_sparse <- 0.5  # level of sparsity
p_noise <- 0.3  # level of noise
p_combase <- 0.5 # congruence level of the loading matrices
p_fixzero <- 1 # we assume the positions of zero loadings are identical across different clusters
mean  <- 0.1 # the proportion of the mean structure in total cluster differences
a <- CSSCASimulation(n_cluster, mem_cluster, n_block, n_com, n_distinct, n_var, p_sparse,
p_noise, p_combase, p_fixzero, "both", mean)
y <- a$block_data
resultsCSSCA <- FixedCSSCA(y, n_block, n_com, n_distinct, n_var, n_cluster,  p_sparse)
y <- a$concatnated_data
resultsCSSCA <- FixedCSSCA(y, n_block, n_com, n_distinct, n_var, n_cluster,  p_sparse)
remove.packages(CSSCA)
remove.packages("ClusterSSCA")
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
remotes::install_github("syuanuvt/CSSCA")
